<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCacheValidationBundleProductSoldOutSingleStockModeTest">
        <annotations>
            <stories value="Bundle Product Single Stock."/>
            <title value="Cache Validation With Bundle Product In Single Stock Mode."/>
            <description value="Verify cache validation for bundle product totally sold in single stock mode."/>
            <testCaseId value="https://app.hiptest.com/projects/69435/test-plan/folders/912249/scenarios/2200358"/>
            <severity value="CRITICAL"/>
            <group value="msi"/>
            <group value="single_mode"/>
        </annotations>

        <before>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="DisableAllSourcesActionGroup" stepKey="disableAllSources"/>
            <!--Create test data.-->
            <createData entity="_defaultCategory" stepKey="category"/>
            <createData entity="ApiBundleProductShipmentTypeSeparately" stepKey="bundleProduct"/>
            <createData entity="VirtualProduct" stepKey="product"/>
            <createData entity="MsiCustomer1" stepKey="customer"/>
            <!--Add virtual product to bundle-->
            <amOnPage url="{{AdminProductEditPage.url($$bundleProduct.id$$)}}" stepKey="openProductEditPageToAssignOption"/>
            <conditionalClick selector="{{AdminProductFormBundleSection.bundleItemsToggle}}" dependentSelector="{{AdminProductFormBundleSection.bundleItemsToggle}}" visible="false" stepKey="conditionallyOpenSectionBundleItems"/>
            <click selector="{{AdminProductFormBundleSection.addOption}}" stepKey="clickAddOption"/>
            <waitForElementVisible selector="{{AdminProductFormBundleSection.bundleOptionXTitle('0')}}" stepKey="waitForBundleOptions"/>
            <fillField selector="{{AdminProductFormBundleSection.bundleOptionXTitle('0')}}" userInput="{{BundleProduct.optionTitle1}}" stepKey="fillOptionTitle"/>
            <selectOption selector="{{AdminProductFormBundleSection.bundleOptionXInputType('0')}}" userInput="{{BundleProduct.optionInputType1}}" stepKey="selectInputType"/>
            <waitForElementVisible selector="{{AdminProductFormBundleSection.addProductsToOption}}" stepKey="waitForAddProductsToBundle"/>
            <click selector="{{AdminProductFormBundleSection.addProductsToOption}}" stepKey="clickAddProductsToOption"/>
            <waitForPageLoad stepKey="waitForPageLoadAfterBundleProducts"/>
            <actionGroup ref="FilterProductGridBySkuActionGroup" stepKey="filterBundleProductOptions">
                <argument name="product" value="$product$"/>
            </actionGroup>
            <checkOption selector="{{AdminAddProductsToOptionPanel.firstCheckbox}}" stepKey="selectFirstGridRow"/>
            <click selector="{{AdminAddProductsToOptionPanel.addSelectedProducts}}" stepKey="clickAddSelectedBundleProducts"/>
            <fillField selector="{{AdminProductFormBundleSection.bundleOptionXProductYQuantity('0', '0')}}" userInput="{{productWithThousandQty.value}}" stepKey="fillProductDefaultQty"/>
            <scrollToTopOfPage stepKey="scrollToTheTopOFBundleProductEditPage"/>
            <actionGroup ref="AdminAssignCategoryToProductAndSaveActionGroup" stepKey="assignCategoryToProduct">
                <argument name="categoryName" value="$category.name$"/>
            </actionGroup>
        </before>
        <after>
            <!--Delete test data.-->
            <actionGroup ref="StorefrontCustomerLogoutActionGroup" stepKey="logoutCustomer" />
            <deleteData createDataKey="customer" stepKey="deleteCustomer"/>
            <deleteData createDataKey="product" stepKey="deleteProduct"/>
            <deleteData createDataKey="bundleProduct" stepKey="deleteBundleProduct"/>
            <deleteData createDataKey="category" stepKey="deleteCategory"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>

        <!--Login To storefront as Customer-->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="loginToStorefront">
            <argument name="Customer" value="$$customer$$"/>
        </actionGroup>
        <!--Add product to cart.-->
        <amOnPage url="{{StorefrontCategoryPage.url($$category.custom_attributes[url_key]$$)}}" stepKey="navigateToCategoryPage"/>
        <actionGroup ref="StorefrontAddCategoryBundleProductWithSingleChoiceToCartActionGroup" stepKey="addBundleProductToCart">
            <argument name="product" value="$bundleProduct$"/>
            <argument name="quantity" value="{{minimalProductQty.value}}"/>
        </actionGroup>
        <!--Place order.-->
        <actionGroup ref="GoToCheckoutFromMinicartActionGroup" stepKey="goToCheckoutFromMinicart" />
        <actionGroup ref="ClickPlaceOrderActionGroup" stepKey="checkoutPlaceOrder"/>
        <actionGroup ref="StorefrontClickOrderLinkFromCheckoutSuccessPageActionGroup" stepKey="clickOrderLink"/>
        <comment userInput="BIC workaround" stepKey="orderNumber"/>
        <grabFromCurrentUrl regex="~/order_id/(\d+)/~" stepKey="orderId"/>
        <!--Process full invoice.-->
        <actionGroup ref="AdminOpenOrderByEntityIdActionGroup" stepKey="openOrder">
            <argument name="entityId" value="{$orderId}"/>
        </actionGroup>
        <actionGroup ref="AdminCreateInvoiceActionGroup" stepKey="createInvoice"/>
        <!--Verify Grouped product is not visible on category page on frontend-->
        <amOnPage url="{{StorefrontCategoryPage.url($$category.custom_attributes[url_key]$$)}}" stepKey="navigateToCategoryPageToVerifyProduct"/>
        <see selector=".empty" userInput="We can't find products matching the selection." stepKey="verifyProductIsAbsentOnCategoryPage"/>
    </test>
</tests>
