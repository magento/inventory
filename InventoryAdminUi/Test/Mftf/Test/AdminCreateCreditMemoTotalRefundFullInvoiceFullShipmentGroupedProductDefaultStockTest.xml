<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCreateCreditMemoTotalRefundFullInvoiceFullShipmentGroupedProductDefaultStockTest">
        <annotations>
            <stories value="Grouped Product Default Stock."/>
            <title value="Create Credit Memo with Total Refund after Full Invoice and Full Shipment with Grouped product on Default stock."/>
            <description value="Verify, admin able to create credit memo with total refund after full invoice and full shipment with grouped product on default stock."/>
            <testCaseId value="https://app.hiptest.com/projects/69435/test-plan/folders/735182/scenarios/2553807"/>
            <severity value="CRITICAL"/>
            <group value="msi"/>
            <group value="multi_mode"/>
        </annotations>

        <before>
            <!--Create test data.-->
            <createData entity="MsiCustomer1" stepKey="customer"/>
            <createData entity="_defaultCategory" stepKey="category"/>
            <createData entity="FullSource1" stepKey="additionalSource"/>
            <createData entity="GroupedProduct" stepKey="groupedProduct"/>
            <createData entity="SimpleProduct" stepKey="product">
                <requiredEntity createDataKey="category"/>
            </createData>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!--Assign Default Stock to Default Website.-->
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignMainWebsiteToDefaultStock">
                <argument name="stockName" value="{{_defaultStock.name}}"/>
                <argument name="websiteName" value="{{_defaultWebsite.name}}"/>
            </actionGroup>
        </before>
        <after>
            <actionGroup ref="DisableSourceActionGroup" stepKey="disableSource">
                <argument name="sourceCode" value="$$additionalSource.source[source_code]$$"/>
            </actionGroup>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutOfAdmin"/>
            <actionGroup ref="StorefrontCustomerLogoutActionGroup" stepKey="logoutCustomer" />
            <deleteData createDataKey="customer" stepKey="deleteCustomer"/>
            <deleteData createDataKey="product" stepKey="deleteProduct"/>
            <deleteData createDataKey="category" stepKey="deleteCategory"/>
            <deleteData createDataKey="groupedProduct" stepKey="deleteGroupedProduct"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
        </after>

        <!--Set default source product quantity.-->
        <amOnPage url="{{AdminProductEditPage.url($$product.id$$)}}" stepKey="openSimpleProductPage"/>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('0')}}" userInput="100" stepKey="setDefaultSourceQuantity"/>
        <actionGroup ref="AdminFormSaveAndCloseActionGroup" stepKey="saveAndCloseSimpleProduct"/>
        <!--Assign simple product to grouped product.-->
        <amOnPage url="{{AdminProductEditPage.url($$groupedProduct.id$$)}}" stepKey="openGroupedProductEditPage"/>
        <click selector="{{AdminProductFormGroupedProductsSection.addProductsToGroup}}" stepKey="clickAddProductsToGroup"/>
        <waitForElementVisible selector="{{AdminAddProductsToGroupPanel.filters}}" stepKey="waitForGroupedProductModal"/>
        <actionGroup ref="FilterProductGridBySkuActionGroup" stepKey="filterGroupedProductOptionsBySimple">
            <argument name="product" value="$$product$$"/>
        </actionGroup>
        <checkOption selector="{{AdminAddProductsToGroupPanel.firstCheckbox}}" stepKey="checkProductFilterResult"/>
        <click selector="{{AdminAddProductsToGroupPanel.addSelectedProducts}}" stepKey="clickAddSelectedGroupProducts"/>
        <waitForLoadingMaskToDisappear stepKey="waitForProductsAssignedToGroupedProduct" after="clickAddSelectedGroupProducts"/>
        <actionGroup ref="FillDefaultQuantityForLinkedToGroupProductInGridActionGroup" stepKey="fillDefaultQtyForVirtualProduct">
            <argument name="productName" value="$$product.name$$"/>
            <argument name="qty" value="10"/>
        </actionGroup>
        <actionGroup ref="AdminFormSaveAndCloseActionGroup" stepKey="saveAndCloseGroupedProduct"/>
        <!--Login to storefront.-->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="loginToStorefront">
            <argument name="Customer" value="$$customer$$"/>
        </actionGroup>
        <!--Add product to cart.-->
        <amOnPage url="{{StorefrontProductPage.url($$groupedProduct.custom_attributes[url_key]$$)}}" stepKey="navigateToGroupedPDP"/>
        <click selector="{{StorefrontProductPageSection.addToCartBtn}}" stepKey="addToCart"/>
        <!--Place order.-->
        <conditionalClick selector="{{StorefrontMinicartSection.showCart}}" dependentSelector="{{StorefrontMinicartSection.miniCartOpened}}" visible="false" stepKey="openMiniCart"/>
        <click selector="{{StorefrontMinicartSection.goToCheckout}}" stepKey="goToCheckout"/>
        <actionGroup ref="StorefrontCheckoutClickNextButtonActionGroup" stepKey="clickNext"/>
        <comment userInput="BIC workaround" stepKey="waitForPlaceOrderButton"/>
        <actionGroup ref="CheckoutSelectCheckMoneyOrderPaymentActionGroup" stepKey="selectCheckMoneyOrderPayment"/>
        <actionGroup ref="ClickPlaceOrderActionGroup" stepKey="placeOrder"/>
        <comment userInput="BIC workaround" stepKey="waitForOrderPlacement"/>
        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber22}}" stepKey="grabOrderNumber"/>
        <see selector="{{CheckoutSuccessMainSection.success}}" userInput="Your order number is:" stepKey="checkOrderPlaceSuccessMessage"/>
        <!--Verify Order.-->
        <actionGroup ref="OpenOrderByIdActionGroup" stepKey="openOrder">
            <argument name="orderId" value="{$grabOrderNumber}"/>
        </actionGroup>
        <grabFromCurrentUrl regex="~/order_id/(\d+)/~" stepKey="grabOrderId"/>
        <waitForElementVisible selector="{{AdminOrderItemsOrderedSection.itemQty('1')}}" stepKey="waitForViewOrderedQuantity"/>
        <see selector="{{AdminOrderItemsOrderedSection.itemQty('1')}}" userInput="Ordered 10" stepKey="verifyOrderedQuantity"/>
        <!--Process full invoice.-->
        <actionGroup ref="StartCreateInvoiceFromOrderPageActionGroup" stepKey="createInvoice"/>
        <actionGroup ref="SubmitInvoiceActionGroup" stepKey="submitInvoice"/>
        <!--Process full shipment.-->
        <actionGroup ref="GoToShipmentIntoOrderActionGroup" stepKey="clickShipAction"/>
        <actionGroup ref="SubmitShipmentIntoOrderActionGroup" stepKey="submitShipment"/>
        <!--Process credit memo total refund.-->
        <actionGroup ref="StartToCreateCreditMemoActionGroup" stepKey="clickCreditMemo">
            <argument name="orderId" value="{$grabOrderId}"/>
        </actionGroup>
        <click selector="{{AdminCreditMemoItemsSection.itemReturnToStock('1')}}" stepKey="checkReturnToStock"/>
        <actionGroup ref="SubmitCreditMemoActionGroup" stepKey="submitCreditMemo"/>

        <!--Admin Area Check quantities after Credit Memo-->
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="navigateToProductIndexPageForCheckProductQtyAfterCreditMemo"/>
        <actionGroup ref="AdminGridFilterSearchResultsByInput" stepKey="findProductBySkuToCheckQtyAfterCreditMemo">
            <argument name="selector" value="AdminProductGridFilterSection.skuFilter"/>
            <argument name="value" value="$$product.sku$$"/>
        </actionGroup>
        <see selector="{{AdminProductGridSection.productQtyPerSource('1',_defaultSource.name)}}" userInput="100" stepKey="checkProductSourceQtyAfterCreditMemo"/>
        <see selector="{{AdminProductGridSection.productSalableQty('1', _defaultStock.name)}}" userInput="100" stepKey="checkSalableQtyAfterCreditMemo"/>
    </test>
</tests>
