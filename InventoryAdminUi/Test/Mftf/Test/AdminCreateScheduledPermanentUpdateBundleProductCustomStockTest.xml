<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCreateScheduledPermanentUpdateBundleProductCustomStockTest" extends="AdminCreateScheduledPermanentUpdateProductTest">
        <annotations>
            <stories value="Bundle Product Custom Stock."/>
            <title value="Create Schedule Update With Bundle Product On Custom Stock."/>
            <description value="Verify, bundle product on custom stock should be visible on storefront after schedule update."/>
            <severity value="CRITICAL"/>
            <testCaseId value="https://app.hiptest.com/projects/69435/test-plan/folders/566629/scenarios/1936221"/>
            <group value="msi_ee"/>
            <group value="multi_mode"/>
        </annotations>
        <before>
            <!--Create stock and source.-->
            <createData entity="FullSource1" stepKey="source"/>
            <createData entity="BasicMsiStockWithMainWebsite1" stepKey="stock"/>
            <createData entity="SourceStockLinked1" stepKey="sourceStockLink">
                <requiredEntity createDataKey="stock"/>
                <requiredEntity createDataKey="source"/>
            </createData>
            <!--Create bundle and virtual products.-->
            <createData entity="ApiBundleProductShipmentTypeSeparately" stepKey="bundleProduct"/>
            <createData entity="VirtualProduct" stepKey="product"/>
            <!--Assign virtual product to additional source.-->
            <amOnPage url="{{AdminProductEditPage.url($$product.id$$)}}" stepKey="openVirtualProductEditPage"/>
            <actionGroup ref="UnassignSourceFromProductActionGroup" stepKey="unassignDefaultSourceFromProduct">
                <argument name="sourceCode" value="{{_defaultSource.name}}"/>
            </actionGroup>
            <actionGroup ref="AdminAssignSourceToProductAndSetSourceQuantityActionGroup" stepKey="assignSourceToProduct">
                <argument name="sourceCode" value="$source.source[source_code]$"/>
            </actionGroup>
            <actionGroup ref="AdminFormSaveAndCloseActionGroup" stepKey="saveVirtualProduct"/>
            <!--Add virtual product to bundle.-->
            <amOnPage url="{{AdminProductEditPage.url($$bundleProduct.id$$)}}" stepKey="openProductEditPageToAssignOption"/>
            <conditionalClick selector="{{AdminProductFormBundleSection.bundleItemsToggle}}" dependentSelector="{{AdminProductFormBundleSection.bundleItemsToggle}}" visible="false" stepKey="conditionallyOpenSectionBundleItems"/>
            <click selector="{{AdminProductFormBundleSection.addOption}}" stepKey="clickAddOption"/>
            <waitForElementVisible selector="{{AdminProductFormBundleSection.bundleOptionXTitle('0')}}" stepKey="waitForBundleOptions"/>
            <fillField selector="{{AdminProductFormBundleSection.bundleOptionXTitle('0')}}" userInput="{{BundleProduct.optionTitle1}}" stepKey="fillOptionTitle"/>
            <selectOption selector="{{AdminProductFormBundleSection.bundleOptionXInputType('0')}}" userInput="{{BundleProduct.optionInputType1}}" stepKey="selectInputType"/>
            <waitForElementVisible selector="{{AdminProductFormBundleSection.addProductsToOption}}" stepKey="waitForAddProductsToBundle"/>
            <click selector="{{AdminProductFormBundleSection.addProductsToOption}}" stepKey="clickAddProductsToOption"/>
            <waitForPageLoad stepKey="waitForPageLoadAfterBundleProducts"/>
            <actionGroup ref="FilterProductGridBySkuActionGroup" stepKey="filterBundleProductOptions">
                <argument name="product" value="$$product$$"/>
            </actionGroup>
            <checkOption selector="{{AdminAddProductsToOptionPanel.firstCheckbox}}" stepKey="selectFirstGridRow"/>
            <click selector="{{AdminAddProductsToOptionPanel.addSelectedProducts}}" stepKey="clickAddSelectedBundleProducts"/>
            <fillField selector="{{AdminProductFormBundleSection.bundleOptionXProductYQuantity('0', '0')}}" userInput="{{minimalProductQty.value}}" stepKey="fillProductDefaultQty"/>
            <scrollToTopOfPage stepKey="scrollToTheTopOfCategoryPage"/>
            <actionGroup ref="AdminAssignCategoryToProductAndSaveActionGroup" stepKey="assignCategoryToProduct">
                <argument name="categoryName" value="$createCategory.name$"/>
            </actionGroup>
            <!--Create source.-->
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
            <actionGroup ref="CliCacheFlushActionGroup" stepKey="flushCache">
                <argument name="tags" value=""/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="product" stepKey="deleteVirtualProduct" before="deleteBundleProduct"/>
            <deleteData createDataKey="bundleProduct" stepKey="deleteBundleProduct" before="disableSource"/>
            <!--Disable additional source.-->
            <actionGroup ref="DisableSourceActionGroup" stepKey="disableSource" before="assignMainWebsiteToDefaultStock">
                <argument name="sourceCode" value="$source.source[source_code]$"/>
            </actionGroup>
            <!--Assign Default Stock to Default Website.-->
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignMainWebsiteToDefaultStock" before="deleteStock">
                <argument name="stockName" value="{{_defaultStock.name}}"/>
                <argument name="websiteName" value="{{_defaultWebsite.name}}"/>
            </actionGroup>
            <deleteData createDataKey="stock" stepKey="deleteStock" before="amOnLogoutPage"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex" after="amOnLogoutPage">
                <argument name="indices" value=""/>
            </actionGroup>
        </after>

        <!--Verify bundle product on storefront.-->
        <amOnPage url="{{StorefrontCategoryPage.url($createCategory.custom_attributes[url_key]$)}}" stepKey="navigateToCategoryPage"/>
        <waitForPageLoad stepKey="waitForCategory"/>
        <see userInput="$bundleProduct.name$" stepKey="assertProductPresent"/>
        <see userInput="$product.price$" stepKey="assertProductPricePresent"/>
    </test>
</tests>
