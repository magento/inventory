<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminGroupedProductAdditionalStockDisableMangeStockOnProductPageTest">
        <annotations>
            <stories value="Grouped Product Multi Stock."/>
            <title value="Disable Manage Stock Grouped Product Edit Page."/>
            <description value="Verify, admin should be able to disable manage stock on product page for grouped product type on additional stock.."/>
            <testCaseId value="https://app.hiptest.com/projects/69435/test-plan/folders/457017/scenarios/1550639"/>
            <severity value="CRITICAL"/>
            <group value="msi"/>
            <group value="multi_mode"/>
        </annotations>

        <before>
            <!--Create category, grouped and simple products. Create additional stock and additional source.-->
            <createData entity="_defaultCategory" stepKey="category"/>
            <createData entity="GroupedProduct" stepKey="groupedProduct"/>
            <createData entity="SimpleProduct" stepKey="simpleProduct">
                <requiredEntity createDataKey="category"/>
            </createData>
            <createData entity="FullSource1" stepKey="additionalSource"/>
            <createData entity="BasicMsiStockWithMainWebsite1" stepKey="additionalStock"/>
            <!--Assign source to stock.-->
            <createData entity="SourceStockLinked1" stepKey="linkSourceStock">
                <requiredEntity createDataKey="additionalStock"/>
                <requiredEntity createDataKey="additionalSource"/>
            </createData>
        </before>
        <after>
            <!--Assign Default Stock to Main Website.-->
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignMainWebsiteToDefaultStock">
                <argument name="stockName" value="{{_defaultStock.name}}"/>
                <argument name="websiteName" value="{{_defaultWebsite.name}}"/>
            </actionGroup>
            <!--Disable created sources.-->
            <actionGroup ref="DisableSourceActionGroup" stepKey="disableSource">
                <argument name="sourceCode" value="$$additionalSource.source[source_code]$$"/>
            </actionGroup>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutOfAdmin"/>
            <!--Delete category, simple, grouped product and stock.-->
            <deleteData createDataKey="category" stepKey="deleteCategory"/>
            <deleteData createDataKey="simpleProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="groupedProduct" stepKey="deleteGroupedProduct"/>
            <deleteData createDataKey="additionalStock" stepKey="deleteStock"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
        </after>

        <!--Assign simple product to source and website.-->
        <actionGroup ref="AdminLoginActionGroup" stepKey="loginToAdminArea"/>
        <amOnPage url="{{AdminProductEditPage.url($$simpleProduct.id$$)}}" stepKey="openProductEditPageToAssignSource"/>
        <actionGroup ref="AssignSourceToProductActionGroup" stepKey="assignTestSourceToCreatedProduct">
            <argument name="sourceCode" value="$$additionalSource.source[source_code]$$"/>
        </actionGroup>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('1')}}" userInput="100" stepKey="setProductQuantity"/>
        <actionGroup ref="AdminFormSaveAndCloseActionGroup" stepKey="saveSimpleProduct"/>
        <!--Assign simple to grouped product.-->
        <amOnPage url="{{AdminProductEditPage.url($$groupedProduct.id$$)}}" stepKey="openGroupedProductEditPage"/>
        <click selector="{{AdminProductFormGroupedProductsSection.addProductsToGroup}}" stepKey="clickAddProductsToGroup"/>
        <waitForElementVisible selector="{{AdminAddProductsToGroupPanel.filters}}" stepKey="waitForGroupedProductModal" after="clickAddProductsToGroup"/>
        <actionGroup ref="FilterProductGridBySkuActionGroup" stepKey="filterGroupedProductOptionsBySimple" after="waitForGroupedProductModal">
            <argument name="product" value="$$simpleProduct$$"/>
        </actionGroup>
        <checkOption selector="{{AdminAddProductsToGroupPanel.firstCheckbox}}" stepKey="checkSimpleProductFilterResult" after="filterGroupedProductOptionsBySimple"/>
        <click selector="{{AdminAddProductsToGroupPanel.addSelectedProducts}}" stepKey="clickAddSelectedGroupProducts"/>
        <waitForLoadingMaskToDisappear stepKey="waitForProductsAssignedToGroupedProduct" after="clickAddSelectedGroupProducts"/>
        <actionGroup ref="FillDefaultQuantityForLinkedToGroupProductInGridActionGroup" stepKey="fillDefaultQtyForSimpleProduct">
            <argument name="productName" value="$$simpleProduct.name$$"/>
            <argument name="qty" value="2"/>
        </actionGroup>
        <!--Set grouped product stock status to "Out of Stock".-->
        <scrollToTopOfPage stepKey="scrollToTheProductEditPageTop"/>
        <selectOption selector="{{AdminProductFormSection.productStockStatus}}" userInput="Out of Stock" stepKey="seeProductStockStatus"/>
        <!--Disable "Manage Stock" for grouped product.-->
        <actionGroup ref="AdminCatalogInventoryChangeManageStockActionGroup" stepKey="disableMangeStockOnProductEditPage">
            <argument name="manageStock" value="No"/>
        </actionGroup>
        <!--Assign grouped product to category.-->
        <actionGroup ref="AdminAssignCategoryToProductAndSaveActionGroup" stepKey="assignCategoryToProduct">
            <argument name="categoryName" value="$$category.name$$"/>
        </actionGroup>
        <!--Verify grouped product on storefront.-->
        <amOnPage url="{{StorefrontCategoryPage.url($$category.custom_attributes[url_key]$$)}}" stepKey="navigateToCategoryPage"/>
        <waitForPageLoad stepKey="waitForCategoryPage"/>
        <see userInput="$$groupedProduct.name$$" stepKey="assertProductPresent"/>
        <see userInput="$$simpleProduct.price$$" stepKey="assertProductPricePresent"/>
    </test>
</tests>
