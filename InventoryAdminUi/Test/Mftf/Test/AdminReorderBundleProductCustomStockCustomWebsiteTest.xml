<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminReorderBundleProductCustomStockCustomWebsiteTest">
        <annotations>
            <stories value="Bundle Product Custom Stock."/>
            <title value="Admin reorder bundle product on custom stock, custom website."/>
            <description value="Verify salable quantity admin reorder bundle product on custom stock and custom website."/>
            <testCaseId value="https://studio.cucumber.io/projects/69435/test-plan/folders/735206/scenarios/4452658"/>
            <severity value="CRITICAL"/>
            <group value="msi"/>
            <group value="multi_mode"/>
        </annotations>

        <before>
            <!--Create test data.-->
            <createData entity="FlatRateShippingMethodDefault" stepKey="setDefaultFlatRateShippingMethod"/>
            <createData entity="FullSource1" stepKey="source"/>
            <createData entity="BasicMsiStock1" stepKey="stock"/>
            <createData entity="SourceStockLinked1" stepKey="linkSourceStock">
                <requiredEntity createDataKey="stock"/>
                <requiredEntity createDataKey="source"/>
            </createData>
            <createData entity="_defaultCategory" stepKey="category"/>
            <createData entity="ApiBundleProductShipmentTypeSeparately" stepKey="bundleProduct"/>
            <createData entity="SimpleProduct" stepKey="product1">
                <requiredEntity createDataKey="category"/>
            </createData>
            <createData entity="SimpleProduct" stepKey="product2">
                <requiredEntity createDataKey="category"/>
            </createData>
            <createData entity="DropDownBundleOption" stepKey="bundleOption">
                <requiredEntity createDataKey="bundleProduct"/>
            </createData>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!--Add simple products to bundle product.-->
            <createData entity="ApiBundleLink" stepKey="bundleLink1">
                <requiredEntity createDataKey="bundleProduct"/>
                <requiredEntity createDataKey="bundleOption"/>
                <requiredEntity createDataKey="product1"/>
            </createData>
            <createData entity="ApiBundleLink" stepKey="bundleLink2">
                <requiredEntity createDataKey="bundleProduct"/>
                <requiredEntity createDataKey="bundleOption"/>
                <requiredEntity createDataKey="product2"/>
            </createData>
            <!--Create website, store and store view-->
            <actionGroup ref="AdminCreateWebsiteActionGroup" stepKey="createWebsite">
                <argument name="newWebsiteName" value="{{customWebsite.name}}"/>
                <argument name="websiteCode" value="{{customWebsite.code}}"/>
            </actionGroup>
            <actionGroup ref="AdminCreateNewStoreGroupActionGroup" stepKey="createStore">
                <argument name="website" value="{{customWebsite.name}}"/>
                <argument name="storeGroupName" value="{{customStoreGroup.name}}"/>
                <argument name="storeGroupCode" value="{{customStoreGroup.code}}"/>
            </actionGroup>
            <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createStoreView">
                <argument name="StoreGroup" value="customStoreGroup"/>
                <argument name="customStore" value="customStore"/>
            </actionGroup>
            <!--Assign Stock to Website.-->
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignStockToAdditionalWebsite">
                <argument name="stockName" value="$stock.stock[name]$"/>
                <argument name="websiteName" value="{{customWebsite.name}}"/>
            </actionGroup>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
            <!--Assign source, website and set simple product1 quantity-->
            <amOnPage url="{{AdminProductEditPage.url($product1.id$)}}" stepKey="openSimple1ProductEditPage"/>
            <actionGroup ref="UnassignSourceFromProductActionGroup" stepKey="unassignDefaultSourceFromProduct1">
                <argument name="sourceCode" value="{{_defaultSource.name}}"/>
            </actionGroup>
            <actionGroup ref="AdminAssignSourceToProductAndSetSourceQuantityActionGroup" stepKey="assignSourceAndSetProduct1Qty">
                <argument name="sourceCode" value="$source.source[source_code]$"/>
            </actionGroup>
            <actionGroup ref="AddWebsiteToProductActionGroup" stepKey="assignSimpleProduct1ToAdditionalWebsite">
                <argument name="website" value="{{customWebsite.name}}"/>
            </actionGroup>
            <!--Assign source, website and set simple product2 quantity-->
            <amOnPage url="{{AdminProductEditPage.url($product2.id$)}}" stepKey="openSimple2ProductEditPage"/>
            <actionGroup ref="UnassignSourceFromProductActionGroup" stepKey="unassignDefaultSourceFromProduct2">
                <argument name="sourceCode" value="{{_defaultSource.name}}"/>
            </actionGroup>
            <actionGroup ref="AdminAssignSourceToProductAndSetSourceQuantityActionGroup" stepKey="assignSourceAndSetProduct2Qty">
                <argument name="sourceCode" value="$source.source[source_code]$"/>
            </actionGroup>
            <actionGroup ref="AddWebsiteToProductActionGroup" stepKey="assignSimpleProduct2ToAdditionalWebsite">
                <argument name="website" value="{{customWebsite.name}}"/>
            </actionGroup>
        </before>
        <after>
            <!--Delete test data.-->
            <deleteData createDataKey="product1" stepKey="deleteSimpleProduct1"/>
            <deleteData createDataKey="product2" stepKey="deleteSimpleProduct2"/>
            <deleteData createDataKey="category" stepKey="deleteCategory"/>
            <deleteData createDataKey="bundleProduct" stepKey="deleteBundleProduct"/>
            <!--Disable created sources.-->
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignMainWebsiteToDefaultStock">
                <argument name="stockName" value="{{_defaultStock.name}}"/>
                <argument name="websiteName" value="{{_defaultWebsite.name}}"/>
            </actionGroup>
            <actionGroup ref="DisableAllSourcesActionGroup" stepKey="disableAllSources"/>
            <!--Delete created website.-->
            <actionGroup ref="AdminDeleteWebsiteActionGroup" stepKey="deleteWebsite">
                <argument name="websiteName" value="{{customWebsite.name}}"/>
            </actionGroup>
            <deleteData createDataKey="stock" stepKey="deleteStock"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
        </after>

        <!--Get bundle product option.-->
        <amOnPage url="{{AdminProductEditPage.url($bundleProduct.id$)}}" stepKey="openBundleProductEditPage"/>
        <grabTextFrom selector="{{AdminProductFormBundleSection.currentBundleOption}}" stepKey="grabBundleOption"/>
        <actionGroup ref="AddWebsiteToProductActionGroup" stepKey="assignBundleProductToAdditionalWebsite">
            <argument name="website" value="{{customWebsite.name}}"/>
        </actionGroup>
        <!--Create new customer order.-->
        <actionGroup ref="AdminNavigateToNewOrderPageNewCustomerActionGroup" stepKey="navigateToNewOrderWithExistingCustomer"/>
        <actionGroup ref="AdminSelectStoreDuringOrderCreationActionGroup" stepKey="selectCustomStore">
            <argument name="storeView" value="customStore" />
        </actionGroup>
        <!--Add bundle product to order.-->
        <actionGroup ref="AdminFilterProductInCreateOrderActionGroup" stepKey="filterBundleProduct">
            <argument name="productSKU" value="$bundleProduct.sku$"/>
        </actionGroup>
        <actionGroup ref="AdminAddToOrderBundleProductActionGroup" stepKey="addBundleProductToOrder">
            <argument name="option" value="{$grabBundleOption}"/>
            <argument name="selectedProductName" value="$product1.name$"/>
            <argument name="quantity" value="{{fivePiecesAddToCart.value}}"/>
        </actionGroup>
        <!--Fill customer address.-->
        <fillField selector="{{AdminOrderFormAccountSection.email}}" userInput="{{MsiCustomer1.email}}" stepKey="fillEmailField"/>
        <actionGroup ref="FillOrderCustomerInformationActionGroup" stepKey="fillCustomerInformation">
            <argument name="customer" value="MsiCustomer1"/>
            <argument name="address" value="US_Address_TX"/>
        </actionGroup>
        <!--Select flat rate shipping method.-->
        <actionGroup ref="OrderSelectFlatRateShippingActionGroup" stepKey="orderSelectFlatRateShippingMethod"/>
        <!--Submit order.-->
        <click selector="{{AdminOrderFormActionSection.SubmitOrder}}" stepKey="submitOrder"/>
        <!--Reorder bundle product.-->
        <actionGroup ref="AdminReorderActionGroup" stepKey="reorder"/>
        <!--Admin Area Check quantities after Credit Memo-->
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="navigateToProductsGrid"/>
        <actionGroup ref="AdminGridFilterSearchResultsByInput" stepKey="findProduct1BySkuToCheckQtyAfterReorder">
            <argument name="selector" value="AdminProductGridFilterSection.skuFilter"/>
            <argument name="value" value="$product1.sku$"/>
        </actionGroup>
        <actionGroup ref="AssertAdminSalableProductQtyActionGroup" stepKey="checkProduct1SourceQty">
            <argument name="sourceName" value="$source.source[name]$"/>
            <argument name="stockName" value="$stock.stock[name]$"/>
            <argument name="sourceQty" value="{{defaultProductQty.value}}"/>
            <argument name="stockQty" value="{{defaultProductQtyBoughtWith10Pieces.value}}"/>
        </actionGroup>
    </test>
</tests>
