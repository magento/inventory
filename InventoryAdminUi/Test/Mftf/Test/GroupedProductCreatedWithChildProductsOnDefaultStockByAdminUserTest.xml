<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="GroupedProductCreatedWithChildProductsOnDefaultStockByAdminUserTest">
        <annotations>
            <stories value="Grouped Product"/>
            <title value="Grouped Product created with child products on default stock by Admin user"/>
            <description value="Grouped Product created with child products on default stock by Admin user"/>
            <severity value="MAJOR"/>
            <testCaseId value="AC-6553"/>
        </annotations>
        <before>
            <!--Create simple and grouped product-->
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="SimpleProduct2" stepKey="createFirstSimpleProduct">
            <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="VirtualProduct" stepKey="createVirtualProduct"/>
            <createData entity="ApiGroupedProduct" stepKey="createGroupedProduct"/>
            <createData entity="OneSimpleProductLink" stepKey="addProductOne">
                <requiredEntity createDataKey="createGroupedProduct"/>
                <requiredEntity createDataKey="createFirstSimpleProduct"/>
            </createData>
            <!-- Create Source and Stock-->
            <createData entity="FullSource1" stepKey="source"/>
            <createData entity="BasicMsiStockWithMainWebsite1" stepKey="stock"/>
            <createData entity="SourceStockLinked1" stepKey="sourceStockLink">
                <requiredEntity createDataKey="stock"/>
                <requiredEntity createDataKey="source"/>
            </createData>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!-- Add Category and source to Simple Product-->
            <amOnPage url="{{AdminProductEditPage.url($$createFirstSimpleProduct.id$$)}}" stepKey="goToSimpleProductEditPage"/>
            <waitForPageLoad stepKey="waitForSimpleProductEditPage"/>
            <actionGroup ref="SetCategoryByNameActionGroup" stepKey="addCategoryToSimpleProduct">
                <argument name="categoryName" value="$$createCategory.name$$"/>
            </actionGroup>
            <!-- Unassign default source-->
            <actionGroup ref="UnassignSourceFromProductActionGroup" stepKey="unassignDefaultSourceFromProduct">
                <argument name="sourceCode" value="{{_defaultSource.name}}"/>
            </actionGroup>
            <actionGroup ref="AdminAssignSourceToProductAndSetSourceQuantityActionGroup" stepKey="assignCreatedSourceToFirstChildProduct">
                <argument name="sourceCode" value="$source.source[source_code]$"/>
            </actionGroup>
            <!-- Fill qty for source in source-->
            <fillField selector="{{AdminProductSourcesGrid.rowQty('0')}}" userInput="100"
                       stepKey="fillSourceQtyField1"/>
            <actionGroup ref="SaveProductFormActionGroup" stepKey="saveCreateFirstSimpleProduct"/>
            <!-- Add Category and source to Virtual Product-->
            <amOnPage url="{{AdminProductEditPage.url($$createVirtualProduct.id$$)}}" stepKey="goToVirtualProductEditPage"/>
            <waitForPageLoad stepKey="waitForVirtualProductEditPage"/>
            <actionGroup ref="SetCategoryByNameActionGroup" stepKey="addCategoryToVirtualProduct">
                <argument name="categoryName" value="$$createCategory.name$$"/>
            </actionGroup>
            <!-- Unassign default source-->
            <actionGroup ref="UnassignSourceFromProductActionGroup" stepKey="unassignDefaultSourceFromProduct2">
                <argument name="sourceCode" value="{{_defaultSource.name}}"/>
            </actionGroup>
            <actionGroup ref="AdminAssignSourceToProductAndSetSourceQuantityActionGroup" stepKey="assignCreatedSourceToFirstChildProduct2">
                <argument name="sourceCode" value="$source.source[source_code]$"/>
            </actionGroup>
            <!-- Fill qty for source in source-->
            <fillField selector="{{AdminProductSourcesGrid.rowQty('0')}}" userInput="100"
                       stepKey="fillSourceQtyField2"/>
            <actionGroup ref="SaveProductFormActionGroup" stepKey="saveCreateVirtualProduct"/>
            <!-- Add virtual product, update status and  qty to Grouped Product-->
            <amOnPage url="{{AdminProductEditPage.url($$createGroupedProduct.id$$)}}" stepKey="openCreateGroupedProductEditPage"/>
            <click selector="{{AdminProductFormGroupedProductsSection.addProductsToGroup}}" stepKey="clickAddProductsToGroup"/>
            <waitForElementVisible selector="{{AdminAddProductsToGroupPanel.filters}}" stepKey="waitForGroupedProductModal"/>
            <actionGroup ref="FilterProductGridBySkuActionGroup" stepKey="filterGroupedProductOptionsBySimple">
                <argument name="product" value="$$createVirtualProduct$$"/>
            </actionGroup>
            <checkOption selector="{{AdminAddProductsToGroupPanel.firstCheckbox}}" stepKey="checkProductFilterResult"/>
            <click selector="{{AdminAddProductsToGroupPanel.addSelectedProducts}}" stepKey="clickAddSelectedGroupProducts"/>
            <selectOption selector="{{AdminProductFormSection.productStockStatus}}" userInput="Out of Stock" stepKey="selectStockStatus1"/>
            <waitForLoadingMaskToDisappear stepKey="waitForProductsAssignedToGroupedProduct" after="clickAddSelectedGroupProducts"/>
            <!-- Add category-->
            <actionGroup ref="SetCategoryByNameActionGroup" stepKey="addCategoryToGroupedProduct">
                <argument name="categoryName" value="$$createCategory.name$$"/>
            </actionGroup>
            <!-- Fill qty as 2 for virtual product-->
            <actionGroup ref="FillDefaultQuantityForLinkedToGroupProductInGridActionGroup" stepKey="fillDefaultQtyForVirtualProduct">
                <argument name="productName" value="$$createVirtualProduct.name$$"/>
                <argument name="qty" value="{{twoPiecesAddToCart.value}}"/>
            </actionGroup>
            <!-- Fill qty as 2 for simple product-->
            <actionGroup ref="FillDefaultQuantityForLinkedToGroupProductInGridActionGroup" stepKey="fillDefaultQtyForSimpleProduct">
                <argument name="productName" value="$$createFirstSimpleProduct.name$$"/>
                <argument name="qty" value="{{twoPiecesAddToCart.value}}"/>
            </actionGroup>
            <actionGroup ref="AdminFormSaveAndCloseActionGroup" stepKey="saveAndCloseGroupedProduct"/>
            <!-- Reindex and Flush Magento as sources and stocks were updated for products-->
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
            <actionGroup ref="CliCacheFlushActionGroup" stepKey="flushCache">
                <argument name="tags" value=""/>
            </actionGroup>
        </before>
        <after>
            <!--Delete created data-->
            <deleteData createDataKey="createFirstSimpleProduct" stepKey="deleteFirstSimpleProduct"/>
            <deleteData createDataKey="createVirtualProduct" stepKey="deleteVirtualProduct"/>
            <deleteData createDataKey="createGroupedProduct" stepKey="deleteGroupedProduct"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <!-- Unassign main website with default stock-->
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignMainWebsiteToDefaultStock">
                <argument name="stockName" value="{{_defaultStock.name}}"/>
                <argument name="websiteName" value="{{_defaultWebsite.name}}"/>
            </actionGroup>
            <!-- Delete custom stock-->
            <deleteData createDataKey="stock" stepKey="deleteCustomStock"/>
            <!--Disable all sources.-->
            <actionGroup ref="DisableAllSourcesActionGroup" stepKey="deleteSource"/>
            <!--Admin logout-->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="adminLogout"/>
        </after>
        <!-- Find the product that we just created using the product grid -->
        <conditionalClick selector="{{AdminProductGridFilterSection.clearFilters}}"
                          dependentSelector="{{AdminProductGridFilterSection.clearFilters}}" visible="true" stepKey="clickClearFiltersInitial"/>
        <actionGroup ref="FilterProductGridBySkuActionGroup" stepKey="findCreatedProduct">
            <argument name="product" value="SimpleProduct2"/>
        </actionGroup>
        <waitForPageLoad stepKey="waitForProductFilterLoad"/>
        <see selector="{{AdminProductGridSection.table}}" userInput="$$createFirstSimpleProduct.name$$" stepKey="seeProduct"/>
        <!--Assert Virtual Product in grid-->
        <conditionalClick selector="{{AdminProductGridFilterSection.clearFilters}}"
                          dependentSelector="{{AdminProductGridFilterSection.clearFilters}}" visible="true" stepKey="clickClearFiltersInitial2"/>
        <actionGroup ref="FilterProductGridBySkuActionGroup" stepKey="findCreatedProduct2">
            <argument name="product" value="VirtualProduct"/>
        </actionGroup>
        <waitForPageLoad stepKey="waitForProductFilterLoad2"/>
        <see selector="{{AdminProductGridSection.table}}" userInput="$$createVirtualProduct.name$$" stepKey="seeVirtualProduct"/>
        <!-- Go to storefront and assert grouped product is absent-->
        <actionGroup ref="StorefrontOpenHomePageActionGroup" stepKey="goToStoreFront"/>
        <actionGroup ref="StorefrontGoToCategoryPageActionGroup" stepKey="openEnabledCategory">
            <argument name="categoryName" value="$$createCategory.name$$"/>
        </actionGroup>
        <dontSee userInput="$$createGroupedProduct.name$$" selector="{{StorefrontCategoryMainSection.productName}}" stepKey="dontSeeGroupedProduct"/>
        <!-- Go to admin product edit page and update stock status as In stock-->
        <amOnPage url="{{AdminProductEditPage.url($$createGroupedProduct.id$$)}}" stepKey="goToProductEditPage"/>
        <waitForPageLoad stepKey="waitForProductEditPageLoad"/>
        <selectOption selector="{{AdminProductFormSection.productStockStatus}}" userInput="In Stock" stepKey="selectStockStatus1"/>
        <actionGroup ref="SaveProductFormActionGroup" stepKey="saveGroupedProduct2"/>
        <!-- Reindex and flush cache as updating status-->
        <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
            <argument name="indices" value=""/>
        </actionGroup>
        <actionGroup ref="CliCacheFlushActionGroup" stepKey="flushCache">
            <argument name="tags" value=""/>
        </actionGroup>
        <actionGroup ref="StorefrontOpenHomePageActionGroup" stepKey="goToStoreFront2"/>
        <actionGroup ref="StorefrontGoToCategoryPageActionGroup" stepKey="openEnabledCategory2">
            <argument name="categoryName" value="$$createCategory.name$$"/>
        </actionGroup>
        <!-- Go to storefront and assert grouped product is present-->
        <see userInput="$$createGroupedProduct.name$$" selector="{{StorefrontCategoryMainSection.productName}}" stepKey="seeGroupedProduct"/>
    </test>
</tests>
