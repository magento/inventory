<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="OrderVirtualProductOnDefaultStockCustomWebsiteTest">
        <annotations>
            <stories value="Virtual Product Default Stock."/>
            <title value="Order virtual product on default stock additional website."/>
            <description value="Verify, customer able to order virtual product on default stock additional website."/>
            <testCaseId value="https://app.hiptest.com/projects/69435/test-plan/folders/419536/scenarios/2941524"/>
            <severity value="CRITICAL"/>
            <group value="msi"/>
            <group value="multi_mode"/>
        </annotations>

        <before>
            <!--Add store code to url.-->
            <magentoCLI command="config:set {{StorefrontEnableAddStoreCodeToUrls.path}} {{StorefrontEnableAddStoreCodeToUrls.value}}" stepKey="addStoreCodeToUrlEnable"/>
            <!--Create test data.-->
            <createData entity="FullSource1" stepKey="additionalSource"/>
            <createData entity="SimpleSubCategory" stepKey="category"/>
            <createData entity="VirtualProduct" stepKey="product"/>
            <!--Create website, store and store view.-->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="AdminCreateWebsiteActionGroup" stepKey="createWebsite">
                <argument name="newWebsiteName" value="{{customWebsite.name}}"/>
                <argument name="websiteCode" value="{{customWebsite.code}}"/>
            </actionGroup>
            <actionGroup ref="AdminCreateNewStoreGroupActionGroup" stepKey="createStore">
                <argument name="website" value="{{customWebsite.name}}"/>
                <argument name="storeGroupName" value="{{customStoreGroup.name}}"/>
                <argument name="storeGroupCode" value="{{customStoreGroup.code}}"/>
            </actionGroup>
            <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createStoreView">
                <argument name="StoreGroup" value="customStoreGroup"/>
                <argument name="customStore" value="customStore"/>
            </actionGroup>
            <!--Assign Default Stock to Additional Website.-->
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignStockToAdditionalWebsite">
                <argument name="stockName" value="{{_defaultStock.name}}"/>
                <argument name="websiteName" value="{{customWebsite.name}}"/>
            </actionGroup>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
        </before>
        <after>
            <!--Delete created website.-->
            <actionGroup ref="AdminDeleteWebsiteActionGroup" stepKey="deleteWebsite">
                <argument name="websiteName" value="{{customWebsite.name}}"/>
            </actionGroup>
            <!--Disable additional source.-->
            <actionGroup ref="DisableSourceActionGroup" stepKey="disableThirdCreatedSource">
                <argument name="sourceCode" value="$$additionalSource.source[source_code]$$"/>
            </actionGroup>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutOfAdmin"/>
            <!--Delete category, simple and grouped product. Delete stock and revert configuration.-->
            <magentoCLI command="config:set {{StorefrontDisableAddStoreCodeToUrls.path}} {{StorefrontDisableAddStoreCodeToUrls.value}}" stepKey="addStoreCodeToUrlDisable"/>
            <!--Clean up created data.-->
            <deleteData createDataKey="category" stepKey="deleteCategory"/>
            <deleteData createDataKey="product" stepKey="deleteProduct"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
        </after>

        <!--Set product qty..-->
        <amOnPage url="{{AdminProductEditPage.url($$product.id$$)}}" stepKey="openProductEditPageToSetQuantity"/>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('0')}}" userInput="100" stepKey="setDefaultSourceQty"/>
        <actionGroup ref="AddWebsiteToProductActionGroup" stepKey="assignProductToAdditionalWebsite">
            <argument name="website" value="{{customWebsite.name}}"/>
        </actionGroup>
        <!--Add product to cart.-->
        <amOnPage url="{{StorefrontHomePage.url}}/{{customStore.code}}/$$product.custom_attributes[url_key]$$.html" stepKey="navigateToPDP"/>
        <waitForPageLoad stepKey="waitForProductPage"/>
        <click selector="{{StorefrontProductPageSection.addToCartBtn}}" stepKey="addToCart"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <!--Place order.-->
        <actionGroup ref="GoToCheckoutFromMinicartActionGroup" stepKey="navigateToCheckout"/>
        <waitForPageLoad stepKey="waitFroPaymentSelectionPageLoad"/>
        <actionGroup ref="GuestCheckoutFillNewBillingAddressActionGroup" stepKey="fillAddress">
            <argument name="customerVar" value="MsiCustomer1"/>
            <argument name="customerAddressVar" value="CustomerAddressSimple"/>
        </actionGroup>
        <click selector="{{CheckoutPaymentSection.update}}" stepKey="updateCustomerBillingAddress"/>
        <actionGroup ref="CheckoutSelectCheckMoneyOrderPaymentActionGroup" stepKey="selectCheckMoneyOrderPayment"/>
        <comment userInput="BIC workaround" stepKey="waitForPlaceOrderButtonVisible"/>
        <actionGroup ref="ClickPlaceOrderActionGroup" stepKey="placeOrder"/>
        <comment userInput="BIC workaround" stepKey="waitUntilOrderPlaced"/>
        <!--Verify product quantity.-->
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="navigateToProductGrid"/>
        <actionGroup ref="AdminGridFilterSearchResultsByInput" stepKey="findProduct">
            <argument name="selector" value="AdminProductGridFilterSection.skuFilter"/>
            <argument name="value" value="$$product.sku$$"/>
        </actionGroup>
        <see selector="{{AdminProductGridSection.productQtyPerSource('1',_defaultSource.name)}}" userInput="100" stepKey="verifySourceQuantity"/>
        <see selector="{{AdminProductGridSection.productSalableQty('1',_defaultStock.name)}}" userInput="99" stepKey="verifyStockQuantity"/>
    </test>
</tests>
