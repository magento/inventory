<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test
        name="SimpleProductWithZeroQtyAndInStockStatusOnTestSourceIsVisibleOnCustomWebsiteIfBackordersEnabledOnProductPageTest"
        extends="SimpleProductWithZeroQtyAndInStockStatusOnDefaultSourceIsVisibleOnHomePageIfBackordersEnabledOnConfigurationPageTest">
        <annotations>
            <stories value="CatalogInventory stock option"/>
            <title
                value="Simple product with 0 qty and 'In stock' status on Test source is visible on Custom website if backorders enabled  on Product page."/>
            <description
                value="Simple product with 0 qty and 'In stock' status on Test source is visible on Custom website if backorders enabled  on Product page."/>
            <testCaseId value="https://app.hiptest.com/projects/69435/test-plan/folders/735256/scenarios/2947658"/>
            <severity value="CRITICAL"/>
            <group value="msi"/>
            <group value="multi_mode"/>
        </annotations>
        <before>
            <remove keyForRemoval="setConfigAllowBackordersTrue"/>
            <!--Add store code to url.-->
            <magentoCLI
                command="config:set {{StorefrontEnableAddStoreCodeToUrls.path}} {{StorefrontEnableAddStoreCodeToUrls.value}}"
                stepKey="addStoreCodeToUrlEnable"/>
            <!--Create website, store and store view.-->
            <actionGroup ref="AdminCreateWebsiteActionGroup" stepKey="createWebsite" after="loginAsAdmin">
                <argument name="newWebsiteName" value="{{customWebsite.name}}"/>
                <argument name="websiteCode" value="{{customWebsite.code}}"/>
            </actionGroup>
            <actionGroup ref="AdminCreateNewStoreGroupActionGroup" stepKey="createStore" after="createWebsite">
                <argument name="website" value="{{customWebsite.name}}"/>
                <argument name="storeGroupName" value="{{customStoreGroup.name}}"/>
                <argument name="storeGroupCode" value="{{customStoreGroup.code}}"/>
            </actionGroup>
            <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createStoreView" after="createStore">
                <argument name="StoreGroup" value="customStoreGroup"/>
                <argument name="customStore" value="customStore"/>
            </actionGroup>
            <!--Assign Custom Stock to Additional Website.-->
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignStockToAdditionalWebsite"
                         after="createStoreView">
                <argument name="stockName" value="{{BasicMsiStock1.name}}"/>
                <argument name="websiteName" value="{{customWebsite.name}}"/>
            </actionGroup>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex" after="assignStockToAdditionalWebsite">
                <argument name="indices" value=""/>
            </actionGroup>
            <actionGroup ref="CliCacheFlushActionGroup" stepKey="flushCache" after="reindex">
                <argument name="tags" value=""/>
            </actionGroup>
        </before>
        <after>
            <!--Delete created website.-->
            <actionGroup ref="AdminDeleteWebsiteActionGroup" stepKey="deleteWebsite" before="logoutOfAdmin1">
                <argument name="websiteName" value="{{customWebsite.name}}"/>
            </actionGroup>
            <magentoCLI
                command="config:set {{StorefrontDisableAddStoreCodeToUrls.path}} {{StorefrontDisableAddStoreCodeToUrls.value}}"
                stepKey="addStoreCodeToUrlDisable" after="deleteWebsite"/>
            <!--Assign Default Stock to Default Website.-->
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignMainWebsiteToDefaultStock" after="addStoreCodeToUrlDisable">
                <argument name="stockName" value="{{_defaultStock.name}}"/>
                <argument name="websiteName" value="{{_defaultWebsite.name}}"/>
            </actionGroup>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
        </after>
        <!-- Assign product to custom website -->
        <remove keyForRemoval="openProductFromSubCategory1"/>
        <amOnPage url="{{AdminProductEditPage.url($$simpleProduct.id$$)}}" stepKey="openProductEditPage" before="seeProductDisplayedAsInStock1"/>

        <!-- Backorder  'Allow Qty Below 0'  enabled on product page -->
        <actionGroup ref="AdminEnableBackordersOnProductEditPageActionGroup" stepKey="enableBackorders1" after="openProductEditPage"/>
        <actionGroup ref="AssignSourceToProductActionGroup" stepKey="assignTestSourceToCreatedProduct" after="enableBackorders1">
            <argument name="sourceCode" value="$$createSource.source[source_code]$$"/>
        </actionGroup>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('0')}}" userInput="0" stepKey="setProductQuantity" after="assignTestSourceToCreatedProduct"/>
        <actionGroup ref="AddWebsiteToProductActionGroup" stepKey="assignProductToAdditionalWebsite" after="setProductQuantity">
            <argument name="website" value="{{customWebsite.name}}"/>
        </actionGroup>
        <remove keyForRemoval="openProductFromSubCategory1"/>

        <!-- Simple product visible on Test website  with status 'In stock' -->
        <amOnPage url="{{StorefrontHomePage.url}}/{{customStore.code}}/$$simpleProduct.custom_attributes[url_key]$$.html" stepKey="navigateToPDP1" after="assignProductToAdditionalWebsite"/>
        <waitForPageLoad after="navigateToPDP1" stepKey="waitForProductPage1"/>

        <remove keyForRemoval="setConfigAllowBackordersNotifyCustomer"/>

        <!-- Backorder  'Allow Qty Below 0 and Notify Customer'  enabled on product page -->
        <amOnPage url="{{AdminProductEditPage.url($$simpleProduct.id$$)}}" stepKey="openProductEditPage2" before="cleanCache"/>
        <actionGroup ref="AdminEnableBackordersOnProductEditPageActionGroup" stepKey="enableBackorders2" after="openProductEditPage2">
            <argument name="backOrders" value="Allow Qty Below 0 and Notify Customer" />
        </actionGroup>
        <click selector="{{AdminProductFormSection.save}}" stepKey="clickSaveButton2" after="enableBackorders2"/>
        <waitForPageLoad stepKey="waitForSimpleProductSaved2" after="clickSaveButton2"/>
        <!-- Simple product visible on Test website  with status 'In stock' -->
        <remove keyForRemoval="openProductFromSubCategory2"/>
        <amOnPage url="{{StorefrontHomePage.url}}/{{customStore.code}}/$$simpleProduct.custom_attributes[url_key]$$.html" stepKey="navigateToPDP2" before="seeProductDisplayedAsInOfStock2"/>
        <waitForPageLoad after="navigateToPDP2" stepKey="waitForProductPage2"/>
    </test>
</tests>
