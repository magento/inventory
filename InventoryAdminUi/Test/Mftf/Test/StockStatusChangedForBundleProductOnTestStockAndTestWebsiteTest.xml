<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StockStatusChangedForBundleProductOnTestStockAndTestWebsiteTest">
        <annotations>
            <stories value="Stock status changed for Bundle product on Test stock and Test website"/>
            <title value="Stock status changed for Bundle product on Test stock and Test website"/>
            <description value="Stock status changed for Bundle product on Test stock and Test website"/>
            <testCaseId value="AC-1856"/>
            <severity value="CRITICAL"/>
            <group value="msi"/>
            <group value="multi_mode"/>
        </annotations>

        <before>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <magentoCLI stepKey="setDisplayOutOfStockProductAsNo" command="config:set cataloginventory/options/show_out_of_stock 0" />
            <actionGroup ref="AdminGoToConfigurationPageEnableDisableManageStock" stepKey="enableManageStockAsYes">
                <argument name="manageStockValue" value="Yes"/>
            </actionGroup>
        </before>

        <after>
            <magentoCLI command="config:set {{StorefrontEnableAddStoreCodeToUrls.path}} {{StorefrontDisableAddStoreCodeToUrls.value}}" stepKey="setAddStoreCodeToUrlsToNo"/>
            <magentoCLI stepKey="setDisplayOutOfStockProductAsYes" command="config:set cataloginventory/options/show_out_of_stock 1" />
            <actionGroup ref="AdminSetWebsiteAsDefaultActionGroup" stepKey="SetTheMainWebsiteAsDefault">
                <argument name="WebsiteName" value="Main Website"/>
            </actionGroup>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindexForResettingTheMainWebsite">
                <argument name="indices" value=""/>
            </actionGroup>
            <actionGroup ref="AdminDeleteStockActionGroup" stepKey="deleteCreatedStock">
                <argument name="stockName" value="Test Stock 1"/>
                <argument name="websiteName" value="{{customWebsite.name}}"/>
            </actionGroup>
            <actionGroup ref="AdminGoToConfigurationPageEnableDisableManageStock" stepKey="enableManageStockBackToYes">
                <argument name="manageStockValue" value="Yes"/>
            </actionGroup>
            <deleteData createDataKey="createMSISimpleProduct" stepKey="deleteMSISimpleProduct"/>
            <deleteData createDataKey="createBundleProduct" stepKey="deleteBundleProduct"/>
            <deleteData createDataKey="createSubCategory" stepKey="deleteSubCategory"/>
            <actionGroup ref="AdminDeleteWebsiteActionGroup" stepKey="deleteWebsite">
                <argument name="websiteName" value="{{customWebsite.name}}"/>
            </actionGroup>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
            <actionGroup ref="DisableAllSourcesActionGroup" stepKey="disableAllSources"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutOfAdmin"/>
        </after>

        <!-- Step1 Create the SubCategory through API -->
        <createData entity="SimpleSubCategory" stepKey="createSubCategory"/>

        <!-- Step2.1 Create website-->
        <actionGroup ref="AdminCreateWebsiteActionGroup" stepKey="createWebsite">
            <argument name="newWebsiteName" value="{{customWebsite.name}}"/>
            <argument name="websiteCode" value="{{customWebsite.code}}"/>
        </actionGroup>

        <!-- Step2.2 Create second store -->
        <actionGroup ref="CreateCustomStoreActionGroup" stepKey="createCustomStore">
            <argument name="website" value="{{customWebsite.name}}"/>
            <argument name="store" value="{{customStoreGroup.name}}"/>
            <argument name="rootCategory" value="Default Category"/>
        </actionGroup>

        <!-- Step2.3 Create second store view -->
        <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createCustomStoreView">
            <argument name="StoreGroup" value="customStoreGroup"/>
            <argument name="customStore" value="customStoreEN"/>
        </actionGroup>

        <!-- Step2.4 Set The Secondary website as default -->
        <actionGroup ref="AdminSetWebsiteAsDefaultActionGroup" stepKey="SetTheWebsiteAsDefault">
            <argument name="WebsiteName" value="{{customWebsite.name}}"/>
        </actionGroup>
        <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
            <argument name="indices" value=""/>
        </actionGroup>

        <!-- Step3 Create New Source -->
        <createData entity="FullSource1" stepKey="createTestSource1"/>

        <!-- Step4 Create the stock from UI, assign the sources and assign Test Website as Sales Channel-->
        <actionGroup ref="AdminCreateNewStockActionGroup" stepKey="createNewStockWithTestWebsite">
            <argument name="assignSource" value="$$createTestSource1.source[name]$$"/>
            <argument name="stockName" value="Test Stock 1"/>
            <argument name="websiteName" value="{{customWebsite.name}}"/>
        </actionGroup>

        <!-- Step5 Set your Test Website accessible on frontend via Add Store Code to Urls-->
        <magentoCLI command="config:set {{StorefrontEnableAddStoreCodeToUrls.path}} {{StorefrontEnableAddStoreCodeToUrls.value}}" stepKey="setAddStoreCodeToUrlsToYes"/>
        <actionGroup ref="CliIndexerReindexActionGroup" stepKey="performReindex">
            <argument name="indices" value=""/>
        </actionGroup>
        <actionGroup ref="CliCacheFlushActionGroup" stepKey="cleanCache">
            <argument name="tags" value=""/>
        </actionGroup>

        <!-- Step6.1 Create Simple Product -->
        <createData entity="SimpleProduct" stepKey="createMSISimpleProduct">
            <requiredEntity createDataKey="createSubCategory" />
        </createData>

        <!-- Step6.2 Search for the Created Simple Product -->
        <actionGroup ref="FilterAndSelectProductActionGroup" stepKey="openSimpleProductPage">
            <argument name="productSku" value="$$createMSISimpleProduct.sku$$"/>
        </actionGroup>

        <!-- Step6.3 Assign the Source to the created Simple Product and select the Test Website-->
        <actionGroup ref="AdminAssignSourceToSimpleProduct" stepKey="AdminAssignSourceToSimpleProduct">
            <argument name="filter_selector" value="AdminManageSourcesGridFilterControls.code"/>
            <argument name="filter_value" value="$$createTestSource1.source[source_code]$$"/>
            <argument name="sourceName" value="$$createTestSource1.source[name]$$"/>
        </actionGroup>
        <actionGroup ref="AdminAssignProductInWebsiteActionGroup" stepKey="assignProductToCustomWebsite">
            <argument name="website" value="{{customWebsite.name}}"/>
        </actionGroup>
        <actionGroup ref="AdminOpenContentSectionOnProductPageActionGroup" stepKey="openContentTab"/>

        <!-- Step6.4 Save the Simple Product-->
        <actionGroup ref="SaveProductFormActionGroup" stepKey="saveSimpleProduct"/>

        <!-- Step7.1 Create Bundle product -->
        <createData entity="ApiBundleProductShipmentTypeSeparately" stepKey="createBundleProduct"/>

        <!-- Step7.2 Search for the Created Bundle product-->
        <actionGroup ref="FilterAndSelectProductActionGroup" stepKey="openBundleProductPage">
            <argument name="productSku" value="$$createBundleProduct.sku$$"/>
        </actionGroup>

        <!-- Step7.3 Update the Created Bundle product and select the Test Website-->
        <actionGroup ref="AdminAssignSourceToBundleProduct" stepKey="AdminAssignSourceToBundleProduct">
            <argument name="categoryName" value="$$createSubCategory.name$$"/>
            <argument name="product" value="$$createMSISimpleProduct$$"/>
            <argument name="website" value="{{customWebsite.name}}"/>
        </actionGroup>

        <!-- Step7.4 Save the Bundle Product-->
        <actionGroup ref="SaveProductFormActionGroup" stepKey="saveBundleProduct"/>

        <!-- Step7.5 Verify the Bundle Product in Created Category in Storefront is Present -->
        <actionGroup ref="AssertProductInStorefrontCategoryPage" stepKey="assertProductInStorefront1">
            <argument name="category" value="$$createSubCategory$$"/>
            <argument name="product" value="$$createBundleProduct$$"/>
        </actionGroup>

        <!-- Step8.1 Search for the Created Bundle Product -->
        <actionGroup ref="FilterAndSelectProductActionGroup" stepKey="openBundleProductPageForEditAdvancedInventoryManageStock">
            <argument name="productSku" value="$$createBundleProduct.sku$$"/>
        </actionGroup>

        <!-- Step8.2 Update the created Bundle Product to out of stock from Product Page-->
        <selectOption userInput="Out of Stock" selector="{{AdminProductGridSection.selectStockStatus}}" stepKey="selectOutOfStock"/>

        <!-- Step8.3 Save the Bundle Product -->
        <actionGroup ref="SaveProductFormActionGroup" stepKey="saveProductPostOutOfStock"/>
        <actionGroup ref="CliIndexerReindexActionGroup" stepKey="performReindexPostOutOfStock">
            <argument name="indices" value=""/>
        </actionGroup>
        <actionGroup ref="CliCacheFlushActionGroup" stepKey="cleanCachePostOutOfStock">
            <argument name="tags" value=""/>
        </actionGroup>

        <!-- Step9.1 Verify the Bundle Product in Created Category in Storefront is not present -->
        <actionGroup ref="AssertProductNotPresentInStorefrontCategoryPage" stepKey="assertProductNotPresentInStorefrontPostMakingTheBundleProductOutOfStock">
            <argument name="category" value="$$createSubCategory$$"/>
            <argument name="product" value="$$createBundleProduct$$"/>
        </actionGroup>

        <!-- Step10.1 change the stock status back to In the Stock for the bundled product -->
        <actionGroup ref="FilterAndSelectProductActionGroup" stepKey="openBundleProductPageForEditAdvancedInventoryManageStock1">
            <argument name="productSku" value="$$createBundleProduct.sku$$"/>
        </actionGroup>

        <!-- Step10.2 Update the created Bundle Product to in stock from Product Page-->
        <selectOption userInput="In Stock" selector="{{AdminProductGridSection.selectStockStatus}}" stepKey="selectInStock"/>

        <!-- Step10.3 Save the Bundle Product -->
        <actionGroup ref="SaveProductFormActionGroup" stepKey="saveProductPostInStock"/>
        <actionGroup ref="CliIndexerReindexActionGroup" stepKey="performReindexPostInStock">
            <argument name="indices" value=""/>
        </actionGroup>
        <actionGroup ref="CliCacheFlushActionGroup" stepKey="cleanCachePostInStock">
            <argument name="tags" value=""/>
        </actionGroup>

        <!-- Step11 Verify the Bundle Product name , SKU and status for product in Storefront is present -->
        <actionGroup ref="AssertProductInStorefrontCategoryPage" stepKey="assertProductInStorefrontPostSwitchingBackToInStock">
            <argument name="category" value="$$createSubCategory$$"/>
            <argument name="product" value="$$createBundleProduct$$"/>
        </actionGroup>
        <actionGroup ref="AssertProductNameAndSkuInStorefrontProductPageByCustomAttributeUrlKeyActionGroup" stepKey="navigateToProductOnStoreFrontToValidateNameAndSKU">
            <argument name="product" value="$$createBundleProduct$$"/>
        </actionGroup>
        <seeElement selector="{{AdminProductGridSection.stockAvailability('In stock')}}" stepKey="seeProductStockStatusOnStoreFrontAgain"/>
    </test>
</tests>
