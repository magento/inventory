<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCreateOrderWithSimpleProductFromTestSourceWithBackordersTest">
        <annotations>
            <stories value="Sales-Backorder"/>
            <title value="Admin user set negative 'Out-of-Stock Threshold' in combination with backorders for Simple product on Test source"/>
            <description value="You should be able to create order from Test Source with backorders in combination with negative out of stock threshold."/>
            <testCaseId value="https://app.hiptest.com/projects/69435/test-plan/folders/735282/scenarios/2068930"/>
            <severity value="CRITICAL"/>
            <group value="msi"/>
            <group value="multi_mode"/>
        </annotations>

        <before>
            <createData entity="MsiCustomer1" stepKey="customer"/>
            <createData entity="SimpleSubCategory" stepKey="category"/>
            <createData entity="SimpleProduct" stepKey="product">
                <requiredEntity createDataKey="category"/>
            </createData>
            <createData entity="_minimalSource" stepKey="source"/>
            <createData entity="BasicMsiStockWithMainWebsite1" stepKey="stock"/>
            <createData entity="SourceStockLinked1" stepKey="stockSourceLink">
                <requiredEntity createDataKey="stock"/>
                <requiredEntity createDataKey="source"/>
            </createData>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginToAdminArea"/>
            <!--Assign source to product.-->
            <amOnPage url="{{AdminProductEditPage.url($product.id$)}}" stepKey="openProductEditPage"/>
            <!--Enable backorder and set 'Out of Stock Threshold'-->
            <actionGroup ref="AdminEnableBackordersOnProductEditPageActionGroup" stepKey="enableBackorders"/>
            <actionGroup ref="AdminChangeOutOfStockThresholdOnProductEditPageActionGroup" stepKey="setOutOfStockThreshold">
                <argument name="threshold" value="{{negativeProductQuantity.value}}"/>
            </actionGroup>
            <actionGroup ref="AdminAssignSourceToProductAndSetSourceQuantityActionGroup" stepKey="assignSourceAndSetQty">
                <argument name="sourceCode" value="$source.source[source_code]$"/>
            </actionGroup>
            <actionGroup ref="SaveProductFormActionGroup" stepKey="saveProduct"/>
        </before>
        <after>
            <actionGroup ref="StorefrontCustomerLogoutActionGroup" stepKey="logoutCustomer" />
            <deleteData createDataKey="customer" stepKey="deleteCustomer"/>
            <deleteData createDataKey="category" stepKey="deleteCategory"/>
            <deleteData createDataKey="product" stepKey="deleteProduct"/>
            <!--Disable custom source.-->
            <actionGroup ref="DisableAllSourcesActionGroup" stepKey="disableAllSources"/>
            <!--Assign main website to default stock.-->
            <actionGroup ref="AssignWebsiteToStockActionGroup" stepKey="assignMainWebsiteToDefaultStock">
                <argument name="stockName" value="{{_defaultStock.name}}"/>
                <argument name="websiteName" value="{{_defaultWebsite.name}}"/>
            </actionGroup>
            <deleteData createDataKey="stock" stepKey="deleteStock"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutOfAdmin"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
        </after>

        <!-- Login as customer -->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="loginToStorefront">
            <argument name="Customer" value="$customer$"/>
        </actionGroup>
        <!-- Add simple product to shopping cart -->
        <actionGroup ref="StorefrontAddSimpleProductWithQtyActionGroup" stepKey="addProductToCart">
            <argument name="product" value="$product$"/>
            <argument name="quantity" value="{{101ProductQty.value}}"/>
        </actionGroup>
        <!--Place order.-->
        <actionGroup ref="GoToCheckoutFromMinicartActionGroup" stepKey="navigateToCheckout"/>
        <actionGroup ref="StorefrontCheckoutClickNextButtonActionGroup" stepKey="clickNext"/>
        <actionGroup ref="ClickPlaceOrderActionGroup" stepKey="placeOrder"/>
        <!--Verify product quantity.-->
        <actionGroup ref="AdminOpenProductIndexPageActionGroup" stepKey="navigateToProductIndexPageForCheckProductQtyAfterPlaceOrder"/>
        <actionGroup ref="AdminGridFilterSearchResultsByInput" stepKey="findProductBySkuToCheckQtyAfterPlaceOrder">
            <argument name="selector" value="AdminProductGridFilterSection.skuFilter"/>
            <argument name="value" value="$product.sku$"/>
        </actionGroup>
        <actionGroup ref="AssertAdminSalableProductQtyActionGroup" stepKey="verifyProductQuantity">
            <argument name="sourceName" value="$source.source[name]$"/>
            <argument name="stockName" value="$stock.stock[name]$"/>
            <argument name="sourceQty" value="{{defaultProductQty.value}}"/>
            <argument name="stockQty" value="{{defaultProductWithNegativeThresholdBoughtWith101Piece.value}}"/>
        </actionGroup>
    </test>
</tests>
