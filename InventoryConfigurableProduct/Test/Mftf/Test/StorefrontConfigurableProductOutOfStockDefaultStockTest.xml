<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontConfigurableProductOutOfStockDefaultStockTest">
        <annotations>
            <stories value="Configurable product Out of Stock in default Stock."/>
            <title value="Storefront configurable product out of stock shows as out of stock in default stock"/>
            <description value="Storefront configurable product out of stock shows as out of stock in default stock"/>
            <useCaseId value="MC-34351"/>
            <severity value="CRITICAL"/>
            <group value="msi"/>
            <group value="multi_mode"/>
            <group value="pr_exclude"/>
        </annotations>

        <before>
            <!--Create category-->
            <createData entity="SimpleSubCategory" stepKey="category"/>
            <!-- Create first attribute with 2 options -->
            <createData entity="productAttributeWithTwoOptionsNotVisible" stepKey="createFirstConfigProductAttribute"/>
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOptionOne">
                <requiredEntity createDataKey="createFirstConfigProductAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="createConfigProductAttributeOptionTwo">
                <requiredEntity createDataKey="createFirstConfigProductAttribute"/>
            </createData>
            <comment userInput="BIC workaround" stepKey="performReindex"/>
            <comment userInput="BIC workaround" stepKey="cleanCache"/>
            <!--Add store code to url.-->
            <magentoCLI command="config:set {{StorefrontEnableAddStoreCodeToUrls.path}} {{StorefrontEnableAddStoreCodeToUrls.value}}" stepKey="addStoreCodeToUrlEnable"/>
            <!-- Login to backend-->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!-- Display out of stock product -->
            <actionGroup ref="DisplayOutOfStockProductActionGroup" stepKey="displayOutOfStockProduct"/>
            <!--Disable all custom sources-->
            <actionGroup ref="DisableAllSourcesActionGroup" stepKey="disableSource"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
            <actionGroup ref="CliCacheCleanActionGroup" stepKey="cleanCache1">
                <argument name="tags" value="config full_page"/>
            </actionGroup>
        </before>
        <after>
            <!--Disable 'add store code to url'-->
            <magentoCLI command="config:set {{StorefrontDisableAddStoreCodeToUrls.path}} {{StorefrontDisableAddStoreCodeToUrls.value}}" stepKey="addStoreCodeToUrlDisable"/>
            <!-- Don't display out of stock product -->
            <actionGroup ref="NoDisplayOutOfStockProductActionGroup" stepKey="revertDisplayOutOfStockProduct"/>
            <!-- Delete configurable product -->
            <actionGroup ref="DeleteProductUsingProductGridActionGroup" stepKey="deleteProduct">
                <argument name="product" value="ConfigurableMsiProduct"/>
            </actionGroup>
            <actionGroup ref="ResetAdminDataGridToDefaultViewActionGroup" stepKey="clearFilters"/>
            <!-- Logout -->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdminArea"/>
            <!-- Delete attribute -->
            <deleteData createDataKey="createFirstConfigProductAttribute" stepKey="deleteFirstConfigProductAttribute"/>
            <!-- Delete category-->
            <deleteData createDataKey="category" stepKey="deleteCategory"/>
            <!-- Reindex invalidated indices after product attribute has been created/deleted -->
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindexInvalidatedIndices">
                <argument name="indices" value=""/>
            </actionGroup>
            <actionGroup ref="CliCacheCleanActionGroup" stepKey="cleanCache">
                <argument name="tags" value="config full_page"/>
            </actionGroup>
        </after>
        <!-- Go to product grid  -->
        <actionGroup ref="AdminOpenProductIndexPageActionGroup" stepKey="openProductGrid"/>
        <!-- Add new configuration product  -->
        <actionGroup ref="GoToCreateProductPageActionGroup" stepKey="goToCreateConfigurableProduct">
            <argument name="product" value="ConfigurableMsiProduct"/>
        </actionGroup>
        <!-- Fill product name, sku, ...  -->
        <actionGroup ref="FillMainProductFormActionGroup" stepKey="fillProductForm">
            <argument name="product" value="ConfigurableMsiProduct"/>
        </actionGroup>
        <!-- Assign product to category  -->
        <searchAndMultiSelectOption selector="{{AdminProductFormSection.categoriesDropdown}}" parameterArray="[$$category.name$$]" stepKey="fillCategory"/>
        <!-- Generate product options  -->
        <actionGroup ref="GenerateConfigurationsByAttributeCodeActionGroup" stepKey="generateConfigurableOptions">
            <argument name="attributeCode" value="$$createFirstConfigProductAttribute.attribute_code$$"/>
        </actionGroup>
        <!-- Save product -->
        <actionGroup ref="SaveConfiguredProductActionGroup" stepKey="saveProductForm"/>
        <!--Set configurable product stock status.-->
        <selectOption selector="{{AdminProductFormSection.productStockStatus}}" userInput="Out of Stock" stepKey="setProductStockStatus"/>
        <actionGroup ref="AdminFormSaveAndCloseActionGroup" stepKey="saveConfigurableProduct"/>
        <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
            <argument name="indices" value=""/>
        </actionGroup>
        <!-- Go to storefront category page PLP -->
        <actionGroup ref="StorefrontNavigateToCategoryUrlActionGroup" stepKey="navigateToCategoryPage">
            <argument name="categoryUrl" value="$$category.custom_attributes[url_key]$$"/>
        </actionGroup>
        <!-- Assert that product is out of stock on category page PLP -->
        <actionGroup ref="StorefrontCheckCategoryOutOfStockConfigurableProductActionGroup" stepKey="assertProductIsOutOfStockOnCategoryPage">
            <argument name="product" value="ConfigurableMsiProduct"/>
        </actionGroup>
        <!-- Go to storefront product page PDP-->
        <actionGroup ref="StorefrontOpenProductPageActionGroup" stepKey="navigateToProductPage">
            <argument name="productUrl" value="{{ConfigurableMsiProduct.urlKey}}"/>
        </actionGroup>
        <!-- Assert that product is out of stock on product page PDP -->
        <dontSee selector="{{StorefrontProductActionSection.addToCart}}" stepKey="assertAddToCartButtonIsNotPresent"/>
        <grabTextFrom selector="{{StorefrontProductInfoMainSection.productStockStatus}}" stepKey="productStockStatus"/>
        <assertEquals stepKey="assertProductIsOutOfStock">
            <expectedResult type="string">OUT OF STOCK</expectedResult>
            <actualResult type="variable">productStockStatus</actualResult>
        </assertEquals>
    </test>
</tests>
